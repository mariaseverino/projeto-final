// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Testes Sucesso', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').usingServer('http://localhost:4444/wd/hub').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('[CT001] Logar no sistema - Sucesso', async function() {
    // Test name: [CT001] Logar no sistema - Sucesso
    // Step # | name | target | value
    // 1 | open | / | 
    await driver.get("http://localhost:3000/home/")
    // 2 | setWindowSize | 1366x694 | 
    await driver.manage().window().setRect(1366, 694)
    // 3 | assertEditable | css=input:nth-child(1) | 
    {
      const element = await driver.findElement(By.css("input:nth-child(1)"))
      assert(await element.isEnabled())
    }
    // 4 | assertEditable | css=input:nth-child(2) | 
    {
      const element = await driver.findElement(By.css("input:nth-child(2)"))
      assert(await element.isEnabled())
    }
    // 5 | click | css=input:nth-child(1) | 
    await driver.findElement(By.css("input:nth-child(1)")).click()
    // 6 | type | css=input:nth-child(1) | nicolas.barbosa@estudante.ufla.br
    await driver.findElement(By.css("input:nth-child(1)")).sendKeys("nicolas.barbosa@estudante.ufla.br")
    // 7 | type | css=input:nth-child(2) | 00000
    await driver.findElement(By.css("input:nth-child(2)")).sendKeys("00000")
    // 8 | click | css=.botao | 
    await driver.findElement(By.css(".botao")).click()
    // 9 | assertElementPresent | id=titulo-bloco | 
    {
      const elements = await driver.findElements(By.id("titulo-bloco"))
      assert(elements.length)
    }
    // 10 | assertElementPresent | css=#acervo > #titulo-bloco | 
    {
      const elements = await driver.findElements(By.css("#acervo > #titulo-bloco"))
      assert(elements.length)
    }
    // 11 | assertElementPresent | id=emprestimos | 
    {
      const elements = await driver.findElements(By.id("emprestimos"))
      assert(elements.length)
    }
  })
  it('[CT003] Listar discentes - Sucesso', async function() {
    // Test name: [CT003] Listar discentes - Sucesso
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/home | 
    await driver.get("http://localhost:3000/home")
    // 2 | setWindowSize | 1366x694 | 
    await driver.manage().window().setRect(1366, 694)
    // 3 | assertElementPresent | id=discentes | 
    {
      const elements = await driver.findElements(By.id("discentes"))
      assert(elements.length)
    }
    // 4 | assertElementPresent | css=#acervo > #titulo-bloco | 
    {
      const elements = await driver.findElements(By.css("#acervo > #titulo-bloco"))
      assert(elements.length)
    }
    // 5 | assertElementPresent | css=#emprestimos > #titulo-bloco | 
    {
      const elements = await driver.findElements(By.css("#emprestimos > #titulo-bloco"))
      assert(elements.length)
    }
    // 6 | click | id=titulo-bloco | 
    await driver.findElement(By.id("titulo-bloco")).click()
    // 7 | assertElementPresent | id=nome-discentes | 
    {
      const elements = await driver.findElements(By.id("nome-discentes"))
      assert(elements.length)
    }
    // 8 | assertElementPresent | id=matricula-discentes | 
    {
      const elements = await driver.findElements(By.id("matricula-discentes"))
      assert(elements.length)
    }
    // 9 | assertElementPresent | id=editar | 
    {
      const elements = await driver.findElements(By.id("editar"))
      assert(elements.length)
    }
    // 10 | assertElementPresent | id=remover-discente | 
    {
      const elements = await driver.findElements(By.id("remover-discente"))
      assert(elements.length)
    }
    // 11 | assertElementPresent | id=busca | 
    {
      const elements = await driver.findElements(By.id("busca"))
      assert(elements.length)
    }
    // 12 | assertElementPresent | css=line:nth-child(1) | 
    {
      const elements = await driver.findElements(By.css("line:nth-child(1)"))
      assert(elements.length)
    }
    // 13 | assertElementPresent | css=line:nth-child(3) | 
    {
      const elements = await driver.findElements(By.css("line:nth-child(3)"))
      assert(elements.length)
    }
    // 14 | assertElementPresent | css=h1 | 
    {
      const elements = await driver.findElements(By.css("h1"))
      assert(elements.length)
    }
  })
  it('[CT004] Cadastrar discentes - Sucesso', async function() {
    // Test name: [CT004] Cadastrar discentes - Sucesso
    // Step # | name | target | value
    // 1 | open | http://localhost:3000/home | 
    await driver.get("http://localhost:3000/home")
    // 2 | setWindowSize | 1366x694 | 
    await driver.manage().window().setRect(1366, 694)
    // 3 | assertElementPresent | id=discentes | 
    {
      const elements = await driver.findElements(By.id("discentes"))
      assert(elements.length)
    }
    // 4 | assertElementPresent | id=acervo | 
    {
      const elements = await driver.findElements(By.id("acervo"))
      assert(elements.length)
    }
    // 5 | assertElementPresent | id=emprestimos | 
    {
      const elements = await driver.findElements(By.id("emprestimos"))
      assert(elements.length)
    }
    // 6 | assertElementPresent | css=svg | 
    {
      const elements = await driver.findElements(By.css("svg"))
      assert(elements.length)
    }
    // 7 | click | id=discentes | 
    await driver.findElement(By.id("discentes")).click()
    // 8 | assertElementPresent | css=h1 | 
    {
      const elements = await driver.findElements(By.css("h1"))
      assert(elements.length)
    }
    // 9 | click | css=h1 | 
    await driver.findElement(By.css("h1")).click()
    // 10 | assertElementPresent | css=.input-cadastro | 
    {
      const elements = await driver.findElements(By.css(".input-cadastro"))
      assert(elements.length)
    }
    // 11 | assertElementPresent | css=input:nth-child(2) | 
    {
      const elements = await driver.findElements(By.css("input:nth-child(2)"))
      assert(elements.length)
    }
    // 12 | assertElementPresent | css=input:nth-child(3) | 
    {
      const elements = await driver.findElements(By.css("input:nth-child(3)"))
      assert(elements.length)
    }
    // 13 | assertElementPresent | css=.botao | 
    {
      const elements = await driver.findElements(By.css(".botao"))
      assert(elements.length)
    }
    // 14 | click | css=.input-cadastro | 
    await driver.findElement(By.css(".input-cadastro")).click()
    // 15 | type | css=.input-cadastro | Maria Rita
    await driver.findElement(By.css(".input-cadastro")).sendKeys("Maria Rita")
    // 16 | click | css=input:nth-child(2) | 
    await driver.findElement(By.css("input:nth-child(2)")).click()
    // 17 | type | css=input:nth-child(2) | 201820290
    await driver.findElement(By.css("input:nth-child(2)")).sendKeys("201820290")
    // 18 | click | css=input:nth-child(3) | 
    await driver.findElement(By.css("input:nth-child(3)")).click()
    // 19 | type | css=input:nth-child(3) | 15543217822
    await driver.findElement(By.css("input:nth-child(3)")).sendKeys("15543217822")
    // 20 | click | css=.botao | 
    await driver.findElement(By.css(".botao")).click()
  })
})
